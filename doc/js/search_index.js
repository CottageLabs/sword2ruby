var search_data = {"index":{"searchIndex":["atom","collection","element","entry","feed","service","object","rexml","element","sword2ruby","atom","autodiscover","connection","depositreceipt","exception","swordaccept","swordstatementoaiore","user","utility","add_dublin_core_extension!()","alternate_uri()","app_accept()","app_accept_alternate_multipart_related()","check_argument_class()","check_uri()","collection_uri()","delete!()","delete_dublin_core_extension!()","delete_media!()","dublin_core_extensions()","edit_media_links()","entry_edit_uri()","find_element_attribute_value()","find_element_boolean()","find_element_by_href()","find_element_by_name()","find_element_by_scheme_and_term()","find_element_integer()","find_element_text()","find_element_time()","find_elements_attribute_value()","find_elements_by_namespace()","find_elements_by_scheme()","find_elements_text()","find_link_uri()","find_links()","find_links_all_types()","media_entry_uri()","media_resource_links()","new()","new()","new()","new()","new()","new()","post!()","post!()","post_media!()","post_media!()","post_multipart!()","post_multipart!()","put!()","put_media!()","put_multipart!()","rdf_about()","read_file()","service_document_uri()","sword_accept_packagings()","sword_collection_policy()","sword_deposited_by()","sword_deposited_by()","sword_deposited_on()","sword_deposited_on()","sword_deposited_on_behalf_of()","sword_deposited_on_behalf_of()","sword_derived_resource_links()","sword_edit_uri()","sword_max_upload_size()","sword_mediation()","sword_original_deposit()","sword_original_deposit_category()","sword_original_deposit_uri()","sword_packagings()","sword_packagings()","sword_services()","sword_state()","sword_state()","sword_state_categories()","sword_state_description()","sword_state_description()","sword_statement_links()","sword_treatment()","sword_treatment()","sword_verbose_description()","sword_version()","to_boolean()","gemfile","rakefile","example"],"longSearchIndex":["atom","atom::collection","atom::element","atom::entry","atom::feed","atom::service","object","rexml","rexml::element","sword2ruby","sword2ruby::atom","sword2ruby::autodiscover","sword2ruby::connection","sword2ruby::depositreceipt","sword2ruby::exception","sword2ruby::swordaccept","sword2ruby::swordstatementoaiore","sword2ruby::user","sword2ruby::utility","atom::entry#add_dublin_core_extension!()","atom::entry#alternate_uri()","atom::collection#app_accept()","atom::collection#app_accept_alternate_multipart_related()","sword2ruby::utility::check_argument_class()","sword2ruby::utility::check_uri()","atom::collection#collection_uri()","atom::entry#delete!()","atom::entry#delete_dublin_core_extension!()","atom::entry#delete_media!()","atom::entry#dublin_core_extensions()","atom::entry#edit_media_links()","atom::entry#entry_edit_uri()","sword2ruby::utility::find_element_attribute_value()","sword2ruby::utility::find_element_boolean()","sword2ruby::utility::find_element_by_href()","sword2ruby::utility::find_element_by_name()","sword2ruby::utility::find_element_by_scheme_and_term()","sword2ruby::utility::find_element_integer()","sword2ruby::utility::find_element_text()","sword2ruby::utility::find_element_time()","sword2ruby::utility::find_elements_attribute_value()","sword2ruby::utility::find_elements_by_namespace()","sword2ruby::utility::find_elements_by_scheme()","sword2ruby::utility::find_elements_text()","sword2ruby::utility::find_link_uri()","sword2ruby::utility::find_links()","sword2ruby::utility::find_links_all_types()","atom::entry#media_entry_uri()","atom::entry#media_resource_links()","atom::service::new()","sword2ruby::autodiscover::new()","sword2ruby::connection::new()","sword2ruby::depositreceipt::new()","sword2ruby::swordstatementoaiore::new()","sword2ruby::user::new()","atom::collection#post!()","atom::entry#post!()","atom::collection#post_media!()","atom::entry#post_media!()","atom::collection#post_multipart!()","atom::entry#post_multipart!()","atom::entry#put!()","atom::entry#put_media!()","atom::entry#put_multipart!()","rexml::element#rdf_about()","sword2ruby::utility::read_file()","atom::service#service_document_uri()","atom::collection#sword_accept_packagings()","atom::collection#sword_collection_policy()","atom::entry#sword_deposited_by()","rexml::element#sword_deposited_by()","atom::entry#sword_deposited_on()","rexml::element#sword_deposited_on()","atom::entry#sword_deposited_on_behalf_of()","rexml::element#sword_deposited_on_behalf_of()","atom::entry#sword_derived_resource_links()","atom::entry#sword_edit_uri()","atom::service#sword_max_upload_size()","atom::collection#sword_mediation()","rexml::element#sword_original_deposit()","atom::entry#sword_original_deposit_category()","atom::entry#sword_original_deposit_uri()","atom::entry#sword_packagings()","rexml::element#sword_packagings()","atom::collection#sword_services()","atom::feed#sword_state()","rexml::element#sword_state()","atom::feed#sword_state_categories()","atom::feed#sword_state_description()","rexml::element#sword_state_description()","atom::entry#sword_statement_links()","atom::collection#sword_treatment()","atom::entry#sword_treatment()","atom::entry#sword_verbose_description()","atom::service#sword_version()","sword2ruby::utility::to_boolean()","","",""],"info":[["Atom","","Atom.html","",""],["Atom::Collection","","Atom/Collection.html","","<p>Extensions to the atom-tools Atom::Collection class to support Sword2\noperations. These methods are additive …\n"],["Atom::Element","","Atom/Element.html","","<p>Extensions to the atom-tools Atom::Element class to support Sword2\noperations. These methods are additive …\n"],["Atom::Entry","","Atom/Entry.html","","<p>Extensions to the atom-tools Atom::Entry class to support Sword2\noperations. These methods are additive …\n"],["Atom::Feed","","Atom/Feed.html","","<p>Extend existing Atom::Service with Sword methods\n"],["Atom::Service","","Atom/Service.html","","<p>Extend existing Atom::Service with Sword methods\n<p>For more information, see the Sword2 specification:  …\n"],["Object","","Object.html","",""],["REXML","","REXML.html","",""],["REXML::Element","","REXML/Element.html","","<p>Overloads for the rdf:Description tag (REXML::Element), used for describing\nOAI-ORE Sword Statements …\n"],["Sword2Ruby","","Sword2Ruby.html","","<p>Sword2Ruby module\n"],["Sword2Ruby::Atom","","Sword2Ruby/Atom.html","","<p>Extensions to the Atom module to support Sword2 operations. These methods\nare additive to those supplied …\n"],["Sword2Ruby::AutoDiscover","","Sword2Ruby/AutoDiscover.html","","<p>AutoDiscover requires the hpricot gem.\n"],["Sword2Ruby::Connection","","Sword2Ruby/Connection.html","","<p>The Connection class inherits from the Atom::HTTP class to ensure\nauthentication credentials are used …\n"],["Sword2Ruby::DepositReceipt","","Sword2Ruby/DepositReceipt.html","","<p>The DepositReceipt object is returned following Post, Put and Delete\noperations on the Sword server. …\n"],["Sword2Ruby::Exception","","Sword2Ruby/Exception.html","","<p>A Sword2Ruby::Exception is raised when the server responds with an error or\nother unexpected output. …\n"],["Sword2Ruby::SwordAccept","","Sword2Ruby/SwordAccept.html","","<p>This class overrides the Atom &lt;app:accept&gt; class and ensures that the\n“alternate” attribute …\n"],["Sword2Ruby::SwordStatementOAIORE","","Sword2Ruby/SwordStatementOAIORE.html","","<p>This class models the OAI-ORE Sword Statement.\n<p>For more information, see the Sword2 specification: section …\n"],["Sword2Ruby::User","","Sword2Ruby/User.html","",""],["Sword2Ruby::Utility","","Sword2Ruby/Utility.html","",""],["add_dublin_core_extension!","Atom::Entry","Atom/Entry.html#method-i-add_dublin_core_extension-21","(name, value)","<p>This method adds a new Dublin Core element to the entry,\n<p>Parameters\n<p>name &mdash; a valid Dublin Core Term Name …\n"],["alternate_uri","Atom::Entry","Atom/Entry.html#method-i-alternate_uri","()","<p>This method returns the URI string of the &lt;link rel=“alternate”&gt; tag\n(usually contained …\n"],["app_accept","Atom::Collection","Atom/Collection.html#method-i-app_accept","()","<p>This method returns the string value of the &lt;app:accept> tag, or nil if\nit not defined in the service …\n"],["app_accept_alternate_multipart_related","Atom::Collection","Atom/Collection.html#method-i-app_accept_alternate_multipart_related","()","<p>This method returns the string value of the &lt;app:accept\nalternate=“multipart-related”> tag, or nil …\n"],["check_argument_class","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-check_argument_class","(name, argument, expected_class)","<p>Method to check the supplied argument is the expected class.\n<p>Parameters\n<p>name &mdash; the string name of the <strong>argument</strong> …\n"],["check_uri","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-check_uri","(uri)","<p>Method to check the supplied uri uses one of the URI schemes defined in\nSword2Ruby::VALID_URI_SCHEMES …\n"],["collection_uri","Atom::Collection","Atom/Collection.html#method-i-collection_uri","()","<p>This method returns the URI string from the @href attribute of the\nCollection, or nil if it is not defined. …\n"],["delete!","Atom::Entry","Atom/Entry.html#method-i-delete-21","(params = {})","<p>This method removes the container by performing a Delete on the entry-edit\nURI. The method will return …\n"],["delete_dublin_core_extension!","Atom::Entry","Atom/Entry.html#method-i-delete_dublin_core_extension-21","(name)","<p>This method searches for the specified Dublin Core term in the entry and\nremoves it where found.\n<p>Parameters …\n"],["delete_media!","Atom::Entry","Atom/Entry.html#method-i-delete_media-21","(params = {})","<p>This method removes all the content of a resource (without removing the\nresource itself) by performing …\n"],["dublin_core_extensions","Atom::Entry","Atom/Entry.html#method-i-dublin_core_extensions","()","<p>This method returns an array of the Dublin Core elements (usually contained\nin the DepositReceipt Entry …\n"],["edit_media_links","Atom::Entry","Atom/Entry.html#method-i-edit_media_links","()","<p>This method returns an array of Atom::Links for the <strong>Atom Edit\nMedia</strong> &lt;link rel=“edit-media”&gt; …\n"],["entry_edit_uri","Atom::Entry","Atom/Entry.html#method-i-entry_edit_uri","()","<p>This method returns the URI string of the <strong>Atom Entry Edit</strong>\n&lt;link rel=“edit”&gt; tag  (usually …\n"],["find_element_attribute_value","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_attribute_value","(elements, name, attribute_name)","<p>Method to return the attribute value of first Atom::Element found in an\narray of Atom::Elements by its …\n"],["find_element_boolean","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_boolean","(elements, name)","<p>Method to return the boolean value of first Atom::Element found in an array\nof Atom::Elements by its …\n"],["find_element_by_href","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_by_href","(elements, href)","<p>Method to return the first Atom::Element found in an array of\nAtom::Elements with a matching @href attribute. …\n"],["find_element_by_name","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_by_name","(elements, name)","<p>Method to return the first Atom::Element found in an array of\nAtom::Elements by its name.\n<p>Parameters\n<p>elements … &mdash; "],["find_element_by_scheme_and_term","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_by_scheme_and_term","(elements, scheme, term)","<p>Method to return the first Atom::Element found in an array of\nAtom::Elements by its scheme and term. …\n"],["find_element_integer","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_integer","(elements, name)","<p>Method to return the integer value of first Atom::Element found in an array\nof Atom::Elements by its …\n"],["find_element_text","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_text","(elements, name)","<p>Method to return the text value of first Atom::Element found in an array of\nAtom::Elements by its name. …\n"],["find_element_time","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_time","(elements, name)","<p>Method to return the time value of first Atom::Element found in an array of\nAtom::Elements by its name. …\n"],["find_elements_attribute_value","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_elements_attribute_value","(elements, name, attribute_name)","<p>Method to return an array of attribute values of matching Atom::Elements\nfound in an array of Atom::Elements …\n"],["find_elements_by_namespace","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_elements_by_namespace","(elements, namespace)","<p>Method to return an array of matching Atom::Elements found in an array of\nAtom::Elements by their namespace. …\n"],["find_elements_by_scheme","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_elements_by_scheme","(elements, scheme)","<p>Method to return an array of matching Atom::Elements found in an array of\nAtom::Elements by their namespace. …\n"],["find_elements_text","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_elements_text","(elements, name)","<p>Method to return an array of text values of matching Atom::Elements found\nin an array of Atom::Elements …\n"],["find_link_uri","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_link_uri","(links, rel, type = nil)","<p>Method to return the @href attribute of the Atom::Link found in an array of\nAtom::Links by its @rel and …\n"],["find_links","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_links","(links, rel, type = nil)","<p>Method to return an array of Atom::Links found in an array of Atom::Links\nby their @rel and @type attributes. …\n"],["find_links_all_types","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_links_all_types","(links, rel)","<p>Method to return an array of Atom::Links found in an array of Atom::Links\nby their @rel attributes.\n<p>Parameters …\n"],["media_entry_uri","Atom::Entry","Atom/Entry.html#method-i-media_entry_uri","()",""],["media_resource_links","Atom::Entry","Atom/Entry.html#method-i-media_resource_links","()",""],["new","Atom::Service","Atom/Service.html#method-c-new","(service_uri, connection = Connection.new())","<p>Retrieves and parses an Atom service document.\n<p>Parameters\n<p>:service_uri &mdash; The URI to the Sword Service Document …\n"],["new","Sword2Ruby::AutoDiscover","Sword2Ruby/AutoDiscover.html#method-c-new","(discover_uri)","<p>Perform an Auto-Discovery on the URI supplied (which should point to an\nhtml document).  The document …\n"],["new","Sword2Ruby::Connection","Sword2Ruby/Connection.html#method-c-new","(user_credentials = nil)","<p>Creates a new Connection object\n<p>Parameters\n<p>user_credentials &mdash; (optional) a Sword2Ruby::User object with the …\n"],["new","Sword2Ruby::DepositReceipt","Sword2Ruby/DepositReceipt.html#method-c-new","(response, connection)","<p>Create a new DepositReceipt using the Response object returned by the\nserver.\n<p>Parameters\n<p>response &mdash; the response …\n"],["new","Sword2Ruby::SwordStatementOAIORE","Sword2Ruby/SwordStatementOAIORE.html#method-c-new","(sword_statement_uri, connection)","<p>Creates a new SwordStatementOAIORE object, using the supplied URI and\nconnection object.\n<p>Parameters\n<p>sword_statement_uri … &mdash; "],["new","Sword2Ruby::User","Sword2Ruby/User.html#method-c-new","(username=nil, password=nil, on_behalf_of=nil)","<p>Creates a new User object.\n<p>Parameters\n<p>username &mdash; (optional) string value of the username.\n"],["post!","Atom::Collection","Atom/Collection.html#method-i-post-21","(params = {})","<p>This method creates a new entry in the collection by posting an Atom entry\nto the collection URI. The …\n"],["post!","Atom::Entry","Atom/Entry.html#method-i-post-21","(params = {})","<p>This method posts a new entry to an existing entry’s sword-edit URI, adding\nto the existing entry’s metadata …\n"],["post_media!","Atom::Collection","Atom/Collection.html#method-i-post_media-21","(params = {})","<p>This method creates a new entry in the collection by posting a file to the\ncollection URI. An MD5-digest …\n"],["post_media!","Atom::Entry","Atom/Entry.html#method-i-post_media-21","(params = {})","<p>This method posts a file to an existing entry’s edit-media URI, adding to\nthe existing entry’s media …\n"],["post_multipart!","Atom::Collection","Atom/Collection.html#method-i-post_multipart-21","(params = {})","<p>This method creates a new entry in the collection by posting a file and\natom-entry to the collection …\n"],["post_multipart!","Atom::Entry","Atom/Entry.html#method-i-post_multipart-21","(params = {})","<p>This method posts an entry and a file to an existing entry’s sword-edit\nURI, adding to the existing entry’s …\n"],["put!","Atom::Entry","Atom/Entry.html#method-i-put-21","(params = {})","<p>This method replaces an existing entry’s metadata by performing a Put on\nthe entry-edit URI. It <em>does</em> …\n"],["put_media!","Atom::Entry","Atom/Entry.html#method-i-put_media-21","(params = {})","<p>This method replaces an existing entry’s file content of a resource by\nperforming a Put on the edit-media …\n"],["put_multipart!","Atom::Entry","Atom/Entry.html#method-i-put_multipart-21","(params = {})","<p>This method replaces an existing entry’s metadata and file content of a\nresource by performing a Put …\n"],["rdf_about","REXML::Element","REXML/Element.html#method-i-rdf_about","()","<p>This method returns the string value of the @rdf:about attribute for the\n&lt;rdf:Description&gt; element …\n"],["read_file","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-read_file","(filepath)","<p>Method to return the filename, MD5 hash and filedata of the supplied\nfilepath.\n<p>Parameters\n<p>filepath &mdash; path …\n"],["service_document_uri","Atom::Service","Atom/Service.html#method-i-service_document_uri","()","<p>This method returns the URI object of the service document.\n"],["sword_accept_packagings","Atom::Collection","Atom/Collection.html#method-i-sword_accept_packagings","()","<p>This method returns an array of the string values of the\n&lt;sword:acceptPackaging> tags, or an empty …\n"],["sword_collection_policy","Atom::Collection","Atom/Collection.html#method-i-sword_collection_policy","()","<p>This method returns the string value of the &lt;sword:collectionPolicy>, or\nnil if it is not defined …\n"],["sword_deposited_by","Atom::Entry","Atom/Entry.html#method-i-sword_deposited_by","()","<p>This method returns the string value of the &lt;sword:depositedBy&gt; tag\n(usually contained in the  …\n"],["sword_deposited_by","REXML::Element","REXML/Element.html#method-i-sword_deposited_by","()","<p>This method returns the string value of the &lt;sword:depositedBy&gt; tag\n(usually contained in the OAI- …\n"],["sword_deposited_on","Atom::Entry","Atom/Entry.html#method-i-sword_deposited_on","()","<p>This method returns the time value of the &lt;sword:depositedOn&gt; tag\n(usually contained in the Sword …\n"],["sword_deposited_on","REXML::Element","REXML/Element.html#method-i-sword_deposited_on","()","<p>This method returns the Time value of the &lt;sword:depositedOn&gt; tag\n(usually contained in the OAI- …\n"],["sword_deposited_on_behalf_of","Atom::Entry","Atom/Entry.html#method-i-sword_deposited_on_behalf_of","()","<p>This method returns the string value of the\n&lt;sword:depositedOnBehalfOf&gt; tag (usually contained …\n"],["sword_deposited_on_behalf_of","REXML::Element","REXML/Element.html#method-i-sword_deposited_on_behalf_of","()","<p>This method returns the string value of the\n&lt;sword:depositedOnBehalfOf&gt; tag (usually contained …\n"],["sword_derived_resource_links","Atom::Entry","Atom/Entry.html#method-i-sword_derived_resource_links","()","<p>This method returns an array of Atom::Links for the <strong>derived\nresource</strong> &lt;link rel=“purl.org/net/sword/terms/derivedResource …\n"],["sword_edit_uri","Atom::Entry","Atom/Entry.html#method-i-sword_edit_uri","()","<p>This method returns the URI string of the <strong>sword edit</strong>\n&lt;link rel=“purl.org/net/sword/terms/add …\n"],["sword_max_upload_size","Atom::Service","Atom/Service.html#method-i-sword_max_upload_size","()","<p>This method returns the integer value of the &lt;sword:maxUploadSize&gt;\ntag (usually contained in the …\n"],["sword_mediation","Atom::Collection","Atom/Collection.html#method-i-sword_mediation","()","<p>This method returns the boolean value of the &lt;sword:mediation> tag, or\nfalse if it is not defined …\n"],["sword_original_deposit","REXML::Element","REXML/Element.html#method-i-sword_original_deposit","()","<p>This method returns the string value of the @rdf:resource attribute for the\n&lt;sword:originalDepsit&gt; …\n"],["sword_original_deposit_category","Atom::Entry","Atom/Entry.html#method-i-sword_original_deposit_category","()","<p>This method returns the Atom::Category of the original deposit (usually\ncontained in the Sword Statement …\n"],["sword_original_deposit_uri","Atom::Entry","Atom/Entry.html#method-i-sword_original_deposit_uri","()","<p>This method returns the URI string of the package or file deposited, as\nspecified in the &lt;link rel=“ …\n"],["sword_packagings","Atom::Entry","Atom/Entry.html#method-i-sword_packagings","()","<p>This method returns an array of string values for the <strong>sword\npackagings</strong>, from the &lt;sword:packaging&gt; …\n"],["sword_packagings","REXML::Element","REXML/Element.html#method-i-sword_packagings","()","<p>This method returns an array of the string values of the @rdf:resource\nattribute for the &lt;sword:packaging&gt; …\n"],["sword_services","Atom::Collection","Atom/Collection.html#method-i-sword_services","()","<p>This method returns an array of the string values of the &lt;sword:service>\ntags, or an empty array [ …\n"],["sword_state","Atom::Feed","Atom/Feed.html#method-i-sword_state","()","<p>This method returns the string href of the &lt;sword:state&gt; tag (usually\ncontained in the Sword Statement …\n"],["sword_state","REXML::Element","REXML/Element.html#method-i-sword_state","()","<p>This method returns the string value of the @rdf:resource attribute of the\n&lt;sword:state&gt; tag (usually …\n"],["sword_state_categories","Atom::Feed","Atom/Feed.html#method-i-sword_state_categories","()","<p>This method returns an array of Atom::Categories of the original deposit\n(usually contained in the Sword …\n"],["sword_state_description","Atom::Feed","Atom/Feed.html#method-i-sword_state_description","()","<p>This method returns the string value of the &lt;sword:stateDescription&gt;\ntag (usually contained in …\n"],["sword_state_description","REXML::Element","REXML/Element.html#method-i-sword_state_description","()","<p>This method returns the string value of the &lt;sword:stateDescription&gt;\ntag (usually contained in …\n"],["sword_statement_links","Atom::Entry","Atom/Entry.html#method-i-sword_statement_links","()","<p>This method returns an array of Atom::Links for the <strong>sword\nstatements</strong>, from the &lt;link\nrel=“purl.org/net/sword/terms/statement …\n"],["sword_treatment","Atom::Collection","Atom/Collection.html#method-i-sword_treatment","()","<p>This method returns the string value of the &lt;sword:treatment> tag, or\nnil if it is not defined in …\n"],["sword_treatment","Atom::Entry","Atom/Entry.html#method-i-sword_treatment","()","<p>This method returns the string value of the <strong>sword\ntreatment</strong> &lt;sword:treatment&gt; tag (usually contained …\n"],["sword_verbose_description","Atom::Entry","Atom/Entry.html#method-i-sword_verbose_description","()","<p>This method returns the string value of the <strong>sword verbose\ndescription</strong> &lt;sword:verboseDescription&gt; …\n"],["sword_version","Atom::Service","Atom/Service.html#method-i-sword_version","()","<p>This method returns the string value of the &lt;sword:version&gt; tag\n(usually contained in the Service …\n"],["to_boolean","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-to_boolean","(value, nil_value = false)","<p>Method to cast a (typically) string value into a boolean value\n<p>Parameters\n<p>value &mdash; the string value to be …\n"],["Gemfile","","Gemfile.html","","<p>source “rubygems.org”\n<p># Specify your gem’s dependencies in sword2ruby.gemspec gemspec\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks”\n"],["example","","spec/fixtures/example_txt.html","","<p>Hello World\n<p>This is an example text file.\n"]]}}