var search_data = {"index":{"searchIndex":["object","sword2ruby","atom","collection","element","entry","feed","service","autodiscover","connection","depositreceipt","exception","swordaccept","swordstatement","user","utility","add_dublin_core_extension!()","alternate_uri()","app_accept()","app_accept_alternate_multipart_related()","check_argument_class()","check_uri()","delete!()","delete_dublin_core_extension!()","delete_media!()","dublin_core_extensions()","edit_media_links()","edit_uri()","entry_edit_uri()","find_element_attribute_value()","find_element_boolean()","find_element_by_name()","find_element_by_scheme_and_term()","find_element_integer()","find_element_text()","find_element_time()","find_elements_attribute_value()","find_elements_by_namespace()","find_elements_by_scheme()","find_elements_text()","find_link_uri()","find_links()","find_links_all_types()","media_entry_uri()","new()","new()","new()","new()","new()","new()","new()","post!()","post!()","post_media!()","post_media!()","post_multipart!()","post_multipart!()","put!()","put_media!()","put_multipart!()","read_file()","service_document_uri()","sword_accept_packagings()","sword_collection_policy()","sword_deposited_by()","sword_deposited_on()","sword_deposited_on_behalf_of()","sword_derived_resource_links()","sword_edit_uri()","sword_max_upload_size()","sword_mediation()","sword_original_deposit_category()","sword_original_deposit_uri()","sword_packagings()","sword_services()","sword_state()","sword_state_categories()","sword_state_description()","sword_statement_links()","sword_treatment()","sword_treatment()","sword_verbose_description()","sword_version()","to_boolean()","gemfile","rakefile","example"],"longSearchIndex":["object","sword2ruby","sword2ruby::atom","sword2ruby::atom::collection","sword2ruby::atom::element","sword2ruby::atom::entry","sword2ruby::atom::feed","sword2ruby::atom::service","sword2ruby::autodiscover","sword2ruby::connection","sword2ruby::depositreceipt","sword2ruby::exception","sword2ruby::swordaccept","sword2ruby::swordstatement","sword2ruby::user","sword2ruby::utility","sword2ruby::atom::entry#add_dublin_core_extension!()","sword2ruby::atom::entry#alternate_uri()","sword2ruby::atom::collection#app_accept()","sword2ruby::atom::collection#app_accept_alternate_multipart_related()","sword2ruby::utility::check_argument_class()","sword2ruby::utility::check_uri()","sword2ruby::atom::entry#delete!()","sword2ruby::atom::entry#delete_dublin_core_extension!()","sword2ruby::atom::entry#delete_media!()","sword2ruby::atom::entry#dublin_core_extensions()","sword2ruby::atom::entry#edit_media_links()","sword2ruby::atom::entry#edit_uri()","sword2ruby::atom::entry#entry_edit_uri()","sword2ruby::utility::find_element_attribute_value()","sword2ruby::utility::find_element_boolean()","sword2ruby::utility::find_element_by_name()","sword2ruby::utility::find_element_by_scheme_and_term()","sword2ruby::utility::find_element_integer()","sword2ruby::utility::find_element_text()","sword2ruby::utility::find_element_time()","sword2ruby::utility::find_elements_attribute_value()","sword2ruby::utility::find_elements_by_namespace()","sword2ruby::utility::find_elements_by_scheme()","sword2ruby::utility::find_elements_text()","sword2ruby::utility::find_link_uri()","sword2ruby::utility::find_links()","sword2ruby::utility::find_links_all_types()","sword2ruby::atom::entry#media_entry_uri()","sword2ruby::atom::service::new()","sword2ruby::autodiscover::new()","sword2ruby::connection::new()","sword2ruby::depositreceipt::new()","sword2ruby::swordstatement::new()","sword2ruby::user::new()","sword2ruby::utility::new()","sword2ruby::atom::collection#post!()","sword2ruby::atom::entry#post!()","sword2ruby::atom::collection#post_media!()","sword2ruby::atom::entry#post_media!()","sword2ruby::atom::collection#post_multipart!()","sword2ruby::atom::entry#post_multipart!()","sword2ruby::atom::entry#put!()","sword2ruby::atom::entry#put_media!()","sword2ruby::atom::entry#put_multipart!()","sword2ruby::utility::read_file()","sword2ruby::atom::service#service_document_uri()","sword2ruby::atom::collection#sword_accept_packagings()","sword2ruby::atom::collection#sword_collection_policy()","sword2ruby::atom::entry#sword_deposited_by()","sword2ruby::atom::entry#sword_deposited_on()","sword2ruby::atom::entry#sword_deposited_on_behalf_of()","sword2ruby::atom::entry#sword_derived_resource_links()","sword2ruby::atom::entry#sword_edit_uri()","sword2ruby::atom::service#sword_max_upload_size()","sword2ruby::atom::collection#sword_mediation()","sword2ruby::atom::entry#sword_original_deposit_category()","sword2ruby::atom::entry#sword_original_deposit_uri()","sword2ruby::atom::entry#sword_packagings()","sword2ruby::atom::collection#sword_services()","sword2ruby::atom::feed#sword_state()","sword2ruby::atom::feed#sword_state_categories()","sword2ruby::atom::feed#sword_state_description()","sword2ruby::atom::entry#sword_statement_links()","sword2ruby::atom::collection#sword_treatment()","sword2ruby::atom::entry#sword_treatment()","sword2ruby::atom::entry#sword_verbose_description()","sword2ruby::atom::service#sword_version()","sword2ruby::utility::to_boolean()","","",""],"info":[["Object","","Object.html","",""],["Sword2Ruby","","Sword2Ruby.html","","<p>deposit_receipt.rb\n<p>sword2ruby_exception.rb\n<p>user.rb\n"],["Sword2Ruby::Atom","","Sword2Ruby/Atom.html","",""],["Sword2Ruby::Atom::Collection","","Sword2Ruby/Atom/Collection.html","","<p>Extensions to the atom-tools Atom::Collection class to support Sword2\noperations. These methods are additive …\n"],["Sword2Ruby::Atom::Element","","Sword2Ruby/Atom/Element.html","","<p>Extensions to the atom-tools Atom::Element class to support Sword2\noperations. These methods are additive …\n"],["Sword2Ruby::Atom::Entry","","Sword2Ruby/Atom/Entry.html","","<p>Extensions to the atom-tools Atom::Entry class to support Sword2\noperations. These methods are additive …\n"],["Sword2Ruby::Atom::Feed","","Sword2Ruby/Atom/Feed.html","","<p>Extend existing Atom::Service with Sword methods\n"],["Sword2Ruby::Atom::Service","","Sword2Ruby/Atom/Service.html","","<p>Extend existing Atom::Service with Sword methods\n"],["Sword2Ruby::AutoDiscover","","Sword2Ruby/AutoDiscover.html","","<p>AutoDiscover requires the hpricot gem.\n"],["Sword2Ruby::Connection","","Sword2Ruby/Connection.html","","<p>The Connection class inherits from the Atom::HTTP class to ensure\nauthentication credentials are used …\n"],["Sword2Ruby::DepositReceipt","","Sword2Ruby/DepositReceipt.html","","<p>The DepositReceipt object is returned following Post, Put and Delete\noperations on the Sword server. …\n"],["Sword2Ruby::Exception","","Sword2Ruby/Exception.html","",""],["Sword2Ruby::SwordAccept","","Sword2Ruby/SwordAccept.html","","<p>Special class to override the usual &lt;app:accept&gt; class\n"],["Sword2Ruby::SwordStatement","","Sword2Ruby/SwordStatement.html","",""],["Sword2Ruby::User","","Sword2Ruby/User.html","",""],["Sword2Ruby::Utility","","Sword2Ruby/Utility.html","",""],["add_dublin_core_extension!","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-add_dublin_core_extension-21","(name, value)","<p>This method adds a new Dublin Core element to the entry,\n<p>name &mdash; a valid Dublin Core Term Name, e.g. “abstract”, …\n"],["alternate_uri","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-alternate_uri","()","<p>This method returns the URI string of the &lt;link rel=“alternate”&gt; tag\n(usually contained …\n"],["app_accept","Sword2Ruby::Atom::Collection","Sword2Ruby/Atom/Collection.html#method-i-app_accept","()","<p>This method returns the string value of the &lt;app:accept> tag, or nil if\nit not defined in the service …\n"],["app_accept_alternate_multipart_related","Sword2Ruby::Atom::Collection","Sword2Ruby/Atom/Collection.html#method-i-app_accept_alternate_multipart_related","()","<p>This method returns the string value of the &lt;app:accept\nalternate=“multipart-related”> tag, or nil …\n"],["check_argument_class","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-check_argument_class","(name, argument, expected_class)",""],["check_uri","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-check_uri","(uri)",""],["delete!","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-delete-21","(alternative_media_entry_uri = media_entry_uri, on_behalf_of = nil, http = @http)",""],["delete_dublin_core_extension!","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-delete_dublin_core_extension-21","(name)","<p>This method searches for the specified Dublin Core term in the entry and\nremoves it where found.\n<p>name … &mdash; "],["delete_media!","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-delete_media-21","(alternative_media_resource_uri = media_resource_links.first.href, on_behalf_of = nil, http = @http)",""],["dublin_core_extensions","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-dublin_core_extensions","()","<p>This method returns an array of the Dublin Core elements (usually contained\nin the DepositReceipt Entry …\n"],["edit_media_links","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-edit_media_links","()","<p>This method returns an array of Atom::Links for the <strong>Edit\nMedia</strong> &lt;link rel=“edit-media”&gt; …\n"],["edit_uri","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-edit_uri","()",""],["entry_edit_uri","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-entry_edit_uri","()","<p>This method returns the URI string of the <strong>Atom Entry Edit</strong>\n&lt;link rel=“edit”&gt; tag  (usually …\n"],["find_element_attribute_value","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_attribute_value","(elements, name, attribute_name)",""],["find_element_boolean","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_boolean","(elements, name)",""],["find_element_by_name","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_by_name","(elements, name)","<p>Find single element\n"],["find_element_by_scheme_and_term","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_by_scheme_and_term","(elements, scheme, term)",""],["find_element_integer","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_integer","(elements, name)",""],["find_element_text","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_text","(elements, name)",""],["find_element_time","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_element_time","(elements, name)",""],["find_elements_attribute_value","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_elements_attribute_value","(elements, name, attribute_name)",""],["find_elements_by_namespace","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_elements_by_namespace","(elements, namespace)",""],["find_elements_by_scheme","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_elements_by_scheme","(categories, scheme)",""],["find_elements_text","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_elements_text","(elements, name)","<p>Find multiple elements\n"],["find_link_uri","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_link_uri","(links, rel, type = nil)",""],["find_links","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_links","(links, rel, type = nil)",""],["find_links_all_types","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-find_links_all_types","(links, rel)",""],["media_entry_uri","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-media_entry_uri","()",""],["new","Sword2Ruby::Atom::Service","Sword2Ruby/Atom/Service.html#method-c-new","(service_url = \"\", http = Atom::HTTP.new)","<p>retrieves and parses an Atom service document.\n"],["new","Sword2Ruby::AutoDiscover","Sword2Ruby/AutoDiscover.html#method-c-new","(discover_uri)","<p>Perform an Auto-Discovery on the URI supplied (which should point to an\nhtml document).  The document …\n"],["new","Sword2Ruby::Connection","Sword2Ruby/Connection.html#method-c-new","(user_credentials = nil)","<p>Creates a new Connection object\n<p>user_credentials &mdash; (optional) a Sword2Ruby::User object with the username …\n\n"],["new","Sword2Ruby::DepositReceipt","Sword2Ruby/DepositReceipt.html#method-c-new","(response, http)","<p>Create a new DepositReceipt using the Response object returned by the\nserver.\n"],["new","Sword2Ruby::SwordStatement","Sword2Ruby/SwordStatement.html#method-c-new","(sword_statement_uri, connection)",""],["new","Sword2Ruby::User","Sword2Ruby/User.html#method-c-new","(username=nil, password=nil, on_behalf_of=nil)",""],["new","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-new","()",""],["post!","Sword2Ruby::Atom::Collection","Sword2Ruby/Atom/Collection.html#method-i-post-21","(entry, slug = nil, in_progress = nil, on_behalf_of = nil)","<p>This method creates a new entry in the collection by posting an Atom entry\nto the collection URI. The …\n"],["post!","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-post-21","(entry, alternative_sword_edit_uri = sword_edit_uri, in_progress = nil, on_behalf_of = nil, http = @http)","<p>This method posts a new entry to an existing entry’s sword-edit URI, adding\nto the existing entry’s metadata …\n"],["post_media!","Sword2Ruby::Atom::Collection","Sword2Ruby/Atom/Collection.html#method-i-post_media-21","(filepath, content_type, packaging, slug = nil, in_progress = nil, on_behalf_of = nil)","<p>This method creates a new entry in the collection by posting a file to the\ncollection URI. An MD5-digest …\n"],["post_media!","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-post_media-21","(filepath, content_type, packaging = nil, alternative_media_resource_uri = media_resource_links.first.href, on_behalf_of = nil, metadata_relevant = nil, http = @http)","<p>This method posts a file to an existing entry’s edit-media URI, adding to\nthe existing entry’s media …\n"],["post_multipart!","Sword2Ruby::Atom::Collection","Sword2Ruby/Atom/Collection.html#method-i-post_multipart-21","(entry, filepath, content_type, packaging, slug = nil, in_progress = nil, on_behalf_of = nil)","<p>This method creates a new entry in the collection by posting a file and\natom-entry to the collection …\n"],["post_multipart!","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-post_multipart-21","(entry, filepath, content_type, packaging = nil, alternative_sword_edit_uri = sword_edit_uri, in_progress = nil, on_behalf_of = nil, metadata_relevant = nil, http = @http)","<p>This method posts an entry and a file to an existing entry’s sword-edit\nURI, adding to the existing entry’s …\n"],["put!","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-put-21","(alternative_media_entry_uri = media_entry_uri, in_progress = nil, on_behalf_of = nil, http = @http)","<p>This method puts an update an existing entry’s sword-edit URI, adding to\nthe existing entry’s metadata …\n"],["put_media!","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-put_media-21","(filepath, content_type, packaging, alternative_media_resource_uri = media_resource_links.first.href, on_behalf_of = nil, metadata_relevant = nil, http = @http)",""],["put_multipart!","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-put_multipart-21","(filepath, content_type, packaging, alternative_media_entry_uri = media_entry_uri, in_progress = nil, on_behalf_of = nil, http = @http)",""],["read_file","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-read_file","(filepath)","<p>Returns [filename, md5 digest, data]\n"],["service_document_uri","Sword2Ruby::Atom::Service","Sword2Ruby/Atom/Service.html#method-i-service_document_uri","()",""],["sword_accept_packagings","Sword2Ruby::Atom::Collection","Sword2Ruby/Atom/Collection.html#method-i-sword_accept_packagings","()","<p>This method returns an array of the string values of the\n&lt;sword:acceptPackaging> tags, or an empty …\n"],["sword_collection_policy","Sword2Ruby::Atom::Collection","Sword2Ruby/Atom/Collection.html#method-i-sword_collection_policy","()","<p>This method returns the string value of the &lt;sword:collectionPolicy>, or\nnil if it is not defined …\n"],["sword_deposited_by","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-sword_deposited_by","()","<p>This method returns the string value of the &lt;sword:depositedBy&gt; tag\n(usually contained in the  …\n"],["sword_deposited_on","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-sword_deposited_on","()","<p>This method returns the time value of the &lt;sword:depositedOn&gt; tag\n(usually contained in the Sword …\n"],["sword_deposited_on_behalf_of","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-sword_deposited_on_behalf_of","()","<p>This method returns the string value of the\n&lt;sword:depositedOnBehalfOf&gt; tag (usually contained …\n"],["sword_derived_resource_links","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-sword_derived_resource_links","()","<p>This method returns an array of Atom::Links for the <strong>derived\nresource</strong> &lt;link rel=“purl.org/net/sword/terms/derivedResource …\n"],["sword_edit_uri","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-sword_edit_uri","()","<p>This method returns the URI string of the <strong>sword edit</strong>\n&lt;link rel=“purl.org/net/sword/terms/add …\n"],["sword_max_upload_size","Sword2Ruby::Atom::Service","Sword2Ruby/Atom/Service.html#method-i-sword_max_upload_size","()",""],["sword_mediation","Sword2Ruby::Atom::Collection","Sword2Ruby/Atom/Collection.html#method-i-sword_mediation","()","<p>This method returns the boolean value of the &lt;sword:mediation> tag, or\nfalse if it is not defined …\n"],["sword_original_deposit_category","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-sword_original_deposit_category","()","<p>This method returns the Atom::Category of the original deposit (usually\ncontained in the Sword Statement …\n"],["sword_original_deposit_uri","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-sword_original_deposit_uri","()","<p>This method returns the URI string of the package or file deposited, as\nspecified in the &lt;link rel=“ …\n"],["sword_packagings","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-sword_packagings","()","<p>This method returns an array of string values for the <strong>sword\npackagings</strong>, from the &lt;sword:packaging&gt; …\n"],["sword_services","Sword2Ruby::Atom::Collection","Sword2Ruby/Atom/Collection.html#method-i-sword_services","()","<p>This method returns an array of the string values of the &lt;sword:service>\ntags, or an empty array [ …\n"],["sword_state","Sword2Ruby::Atom::Feed","Sword2Ruby/Atom/Feed.html#method-i-sword_state","()",""],["sword_state_categories","Sword2Ruby::Atom::Feed","Sword2Ruby/Atom/Feed.html#method-i-sword_state_categories","()",""],["sword_state_description","Sword2Ruby::Atom::Feed","Sword2Ruby/Atom/Feed.html#method-i-sword_state_description","()",""],["sword_statement_links","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-sword_statement_links","()","<p>This method returns an array of Atom::Links for the <strong>sword\nstatements</strong>, from the &lt;link\nrel=“purl.org/net/sword/terms/statement …\n"],["sword_treatment","Sword2Ruby::Atom::Collection","Sword2Ruby/Atom/Collection.html#method-i-sword_treatment","()","<p>This method returns the string value of the &lt;sword:treatment> tag, or\nnil if it is not defined in …\n"],["sword_treatment","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-sword_treatment","()","<p>This method returns the string value of the <strong>sword\ntreatment</strong> &lt;sword:treatment&gt; tag (usually contained …\n"],["sword_verbose_description","Sword2Ruby::Atom::Entry","Sword2Ruby/Atom/Entry.html#method-i-sword_verbose_description","()","<p>This method returns the string value of the <strong>sword verbose\ndescription</strong> &lt;sword:verboseDescription&gt; …\n"],["sword_version","Sword2Ruby::Atom::Service","Sword2Ruby/Atom/Service.html#method-i-sword_version","()",""],["to_boolean","Sword2Ruby::Utility","Sword2Ruby/Utility.html#method-c-to_boolean","(value, nil_value = false)",""],["Gemfile","","Gemfile.html","","<p>source “rubygems.org”\n<p># Specify your gem’s dependencies in sword2ruby.gemspec gemspec\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks”\n"],["example","","spec/fixtures/example_txt.html","","<p>Hello World\n<p>This is an example text file.\n"]]}}